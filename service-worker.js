(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1600110431143;

	const files = [
		"service-worker-index.html",
		"._award.svg",
		"._cellulelife-2.mp4",
		"._home-hero.png",
		"._run.svg",
		"._score.svg",
		"._settings.svg",
		"._split.svg",
		"._weight.svg",
		"award.svg",
		"cellulelife-2.mp4",
		"favicon.png",
		"global.css",
		"home-hero.png",
		"logo-192.png",
		"logo-512.png",
		"manifest.json",
		"run.svg",
		"score.svg",
		"seed-images/bim.png",
		"seed-images/c.png",
		"seed-images/coles.png",
		"seed-images/cube.png",
		"seed-images/diamond.png",
		"seed-images/forty-two.png",
		"seed-images/glider.png",
		"seed-images/hmm.png",
		"seed-images/ligma.png",
		"seed-images/line.png",
		"seed-images/mr-sir.png",
		"seed-images/pentadecathlon.png",
		"seed-images/wall.png",
		"seed-images/windmills.png",
		"settings.svg",
		"split.svg",
		"successkid.jpg",
		"weight.svg"
	];

	const shell = [
		"client/client.d845b9be.js",
		"client/index.c2d9f598.js",
		"client/how-it-works.1009ac38.js",
		"client/[editCount].8017d166.js",
		"client/seeds.96d6e9bd.js",
		"client/[slug].cfca7119.js",
		"client/scores.bb73b914.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
