import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as assign, v as validate_slots, e as exclude_internal_props, b as svg_element, c as claim_element, f as children, g as detach_dev, h as attr_dev, j as add_location, k as set_svg_attributes, l as insert_dev, m as append_dev, n as get_spread_update, o as noop, p as space, q as element, t as text, r as create_component, u as query_selector_all, w as claim_space, x as claim_text, y as claim_component, z as mount_component, A as get_spread_object, B as transition_in, C as transition_out, D as destroy_component } from './client.d845b9be.js';

/* static/settings.svg generated by Svelte v3.23.0 */

const file = "static/settings.svg";

function create_fragment(ctx) {
	let svg;
	let path0;
	let path1;

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 24 24" },
		{ fill: "black" },
		{ width: "18px" },
		{ height: "18px" },
		/*$$props*/ ctx[0]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					viewBox: true,
					fill: true,
					width: true,
					height: true
				},
				1
			);

			var svg_nodes = children(svg);
			path0 = claim_element(svg_nodes, "path", { d: true, fill: true }, 1);
			children(path0).forEach(detach_dev);
			path1 = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path1).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path0, "d", "M0 0h24v24H0z");
			attr_dev(path0, "fill", "none");
			add_location(path0, file, 0, 113, 113);
			attr_dev(path1, "d", "M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-7H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-1.75 9c0 .23-.02.46-.05.68l1.48 1.16c.13.11.17.3.08.45l-1.4 2.42c-.09.15-.27.21-.43.15l-1.74-.7c-.36.28-.76.51-1.18.69l-.26 1.85c-.03.17-.18.3-.35.3h-2.8c-.17 0-.32-.13-.35-.29l-.26-1.85c-.43-.18-.82-.41-1.18-.69l-1.74.7c-.16.06-.34 0-.43-.15l-1.4-2.42c-.09-.15-.05-.34.08-.45l1.48-1.16c-.03-.23-.05-.46-.05-.69 0-.23.02-.46.05-.68l-1.48-1.16c-.13-.11-.17-.3-.08-.45l1.4-2.42c.09-.15.27-.21.43-.15l1.74.7c.36-.28.76-.51 1.18-.69l.26-1.85c.03-.17.18-.3.35-.3h2.8c.17 0 .32.13.35.29l.26 1.85c.43.18.82.41 1.18.69l1.74-.7c.16-.06.34 0 .43.15l1.4 2.42c.09.15.05.34-.08.45l-1.48 1.16c.03.23.05.46.05.69z");
			add_location(path1, file, 0, 150, 150);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		p: function update(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 24 24" },
				{ fill: "black" },
				{ width: "18px" },
				{ height: "18px" },
				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Settings", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class Settings extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Settings",
			options,
			id: create_fragment.name
		});
	}
}

/* static/award.svg generated by Svelte v3.23.0 */

const file$1 = "static/award.svg";

function create_fragment$1(ctx) {
	let svg;
	let rect;
	let path;

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ "enable-background": "new 0 0 24 24" },
		{ viewBox: "0 0 24 24" },
		{ fill: "black" },
		{ width: "18px" },
		{ height: "18px" },
		/*$$props*/ ctx[0]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			rect = svg_element("rect");
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					"enable-background": true,
					viewBox: true,
					fill: true,
					width: true,
					height: true
				},
				1
			);

			var svg_nodes = children(svg);
			rect = claim_element(svg_nodes, "rect", { fill: true, height: true, width: true }, 1);
			children(rect).forEach(detach_dev);
			path = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(rect, "fill", "none");
			attr_dev(rect, "height", "24");
			attr_dev(rect, "width", "24");
			add_location(rect, file$1, 0, 147, 147);
			attr_dev(path, "d", "M19,5h-2V3H7v2H5C3.9,5,3,5.9,3,7v1c0,2.55,1.92,4.63,4.39,4.94c0.63,1.5,1.98,2.63,3.61,2.96V19H7v2h10v-2h-4v-3.1 c1.63-0.33,2.98-1.46,3.61-2.96C19.08,12.63,21,10.55,21,8V7C21,5.9,20.1,5,19,5z M5,8V7h2v3.82C5.84,10.4,5,9.3,5,8z M19,8 c0,1.3-0.84,2.4-2,2.82V7h2V8z");
			add_location(path, file$1, 0, 189, 189);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$1, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, rect);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ "enable-background": "new 0 0 24 24" },
				{ viewBox: "0 0 24 24" },
				{ fill: "black" },
				{ width: "18px" },
				{ height: "18px" },
				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Award", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class Award extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Award",
			options,
			id: create_fragment$1.name
		});
	}
}

/* static/run.svg generated by Svelte v3.23.0 */

const file$2 = "static/run.svg";

function create_fragment$2(ctx) {
	let svg;
	let path0;
	let path1;

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 24 24" },
		{ fill: "black" },
		{ width: "18px" },
		{ height: "18px" },
		/*$$props*/ ctx[0]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					viewBox: true,
					fill: true,
					width: true,
					height: true
				},
				1
			);

			var svg_nodes = children(svg);
			path0 = claim_element(svg_nodes, "path", { d: true, fill: true }, 1);
			children(path0).forEach(detach_dev);
			path1 = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path1).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path0, "d", "M0 0h24v24H0z");
			attr_dev(path0, "fill", "none");
			add_location(path0, file$2, 0, 113, 113);
			attr_dev(path1, "d", "M13.49 5.48c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-3.6 13.9l1-4.4 2.1 2v6h2v-7.5l-2.1-2 .6-3c1.3 1.5 3.3 2.5 5.5 2.5v-2c-1.9 0-3.5-1-4.3-2.4l-1-1.6c-.4-.6-1-1-1.7-1-.3 0-.5.1-.8.1l-5.2 2.2v4.7h2v-3.4l1.8-.7-1.6 8.1-4.9-1-.4 2 7 1.4z");
			add_location(path1, file$2, 0, 150, 150);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$2, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		p: function update(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 24 24" },
				{ fill: "black" },
				{ width: "18px" },
				{ height: "18px" },
				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Run", $$slots, []);

	$$self.$set = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [$$props];
}

class Run extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Run",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/routes/index.svelte generated by Svelte v3.23.0 */
const file$3 = "src/routes/index.svelte";

function create_fragment$3(ctx) {
	let t0;
	let p;
	let t1;
	let t2;
	let h2;
	let t3;
	let t4;
	let div;
	let a0;
	let t5;
	let h30;
	let t6;
	let t7;
	let a1;
	let t8;
	let h31;
	let t9;
	let t10;
	let a2;
	let t11;
	let h32;
	let t12;
	let current;
	const settingssvg_spread_levels = [/*svgProps*/ ctx[0]];
	let settingssvg_props = {};

	for (let i = 0; i < settingssvg_spread_levels.length; i += 1) {
		settingssvg_props = assign(settingssvg_props, settingssvg_spread_levels[i]);
	}

	const settingssvg = new Settings({ props: settingssvg_props, $$inline: true });
	const awardsvg_spread_levels = [/*svgProps*/ ctx[0]];
	let awardsvg_props = {};

	for (let i = 0; i < awardsvg_spread_levels.length; i += 1) {
		awardsvg_props = assign(awardsvg_props, awardsvg_spread_levels[i]);
	}

	const awardsvg = new Award({ props: awardsvg_props, $$inline: true });
	const runsvg_spread_levels = [/*svgProps*/ ctx[0]];
	let runsvg_props = {};

	for (let i = 0; i < runsvg_spread_levels.length; i += 1) {
		runsvg_props = assign(runsvg_props, runsvg_spread_levels[i]);
	}

	const runsvg = new Run({ props: runsvg_props, $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			p = element("p");
			t1 = text("Go for high scores or just click around.");
			t2 = space();
			h2 = element("h2");
			t3 = text("The choice is yours.");
			t4 = space();
			div = element("div");
			a0 = element("a");
			create_component(settingssvg.$$.fragment);
			t5 = space();
			h30 = element("h3");
			t6 = text("See how it works");
			t7 = space();
			a1 = element("a");
			create_component(awardsvg.$$.fragment);
			t8 = space();
			h31 = element("h3");
			t9 = text("View the High Scores");
			t10 = space();
			a2 = element("a");
			create_component(runsvg.$$.fragment);
			t11 = space();
			h32 = element("h3");
			t12 = text("Jump into the game");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-ufc3m5\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, "Go for high scores or just click around.");
			p_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t3 = claim_text(h2_nodes, "The choice is yours.");
			h2_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a0 = claim_element(div_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			claim_component(settingssvg.$$.fragment, a0_nodes);
			t5 = claim_space(a0_nodes);
			h30 = claim_element(a0_nodes, "H3", {});
			var h30_nodes = children(h30);
			t6 = claim_text(h30_nodes, "See how it works");
			h30_nodes.forEach(detach_dev);
			a0_nodes.forEach(detach_dev);
			t7 = claim_space(div_nodes);
			a1 = claim_element(div_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			claim_component(awardsvg.$$.fragment, a1_nodes);
			t8 = claim_space(a1_nodes);
			h31 = claim_element(a1_nodes, "H3", {});
			var h31_nodes = children(h31);
			t9 = claim_text(h31_nodes, "View the High Scores");
			h31_nodes.forEach(detach_dev);
			a1_nodes.forEach(detach_dev);
			t10 = claim_space(div_nodes);
			a2 = claim_element(div_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			claim_component(runsvg.$$.fragment, a2_nodes);
			t11 = claim_space(a2_nodes);
			h32 = claim_element(a2_nodes, "H3", {});
			var h32_nodes = children(h32);
			t12 = claim_text(h32_nodes, "Jump into the game");
			h32_nodes.forEach(detach_dev);
			a2_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Cellulelife - The Gamified Game of Life";
			add_location(p, file$3, 24, 0, 510);
			add_location(h2, file$3, 26, 0, 559);
			add_location(h30, file$3, 31, 2, 711);
			attr_dev(a0, "href", "/how-it-works");
			attr_dev(a0, "class", "call-to-action-wrapper svelte-15rjq13");
			add_location(a0, file$3, 29, 1, 621);
			add_location(h31, file$3, 35, 2, 825);
			attr_dev(a1, "href", "/scores");
			attr_dev(a1, "class", "call-to-action-wrapper svelte-15rjq13");
			add_location(a1, file$3, 33, 1, 744);
			add_location(h32, file$3, 39, 2, 939);
			attr_dev(a2, "href", "/game");
			attr_dev(a2, "class", "call-to-action-wrapper svelte-15rjq13");
			add_location(a2, file$3, 37, 1, 862);
			attr_dev(div, "class", "calls-to-action svelte-15rjq13");
			add_location(div, file$3, 28, 0, 590);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, a0);
			mount_component(settingssvg, a0, null);
			append_dev(a0, t5);
			append_dev(a0, h30);
			append_dev(h30, t6);
			append_dev(div, t7);
			append_dev(div, a1);
			mount_component(awardsvg, a1, null);
			append_dev(a1, t8);
			append_dev(a1, h31);
			append_dev(h31, t9);
			append_dev(div, t10);
			append_dev(div, a2);
			mount_component(runsvg, a2, null);
			append_dev(a2, t11);
			append_dev(a2, h32);
			append_dev(h32, t12);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const settingssvg_changes = (dirty & /*svgProps*/ 1)
			? get_spread_update(settingssvg_spread_levels, [get_spread_object(/*svgProps*/ ctx[0])])
			: {};

			settingssvg.$set(settingssvg_changes);

			const awardsvg_changes = (dirty & /*svgProps*/ 1)
			? get_spread_update(awardsvg_spread_levels, [get_spread_object(/*svgProps*/ ctx[0])])
			: {};

			awardsvg.$set(awardsvg_changes);

			const runsvg_changes = (dirty & /*svgProps*/ 1)
			? get_spread_update(runsvg_spread_levels, [get_spread_object(/*svgProps*/ ctx[0])])
			: {};

			runsvg.$set(runsvg_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(settingssvg.$$.fragment, local);
			transition_in(awardsvg.$$.fragment, local);
			transition_in(runsvg.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(settingssvg.$$.fragment, local);
			transition_out(awardsvg.$$.fragment, local);
			transition_out(runsvg.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div);
			destroy_component(settingssvg);
			destroy_component(awardsvg);
			destroy_component(runsvg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	const svgProps = {
		width: "80%",
		height: "auto",
		fill: "#f69d3c",
		stroke: "rgba(0,0,0,0.2)"
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);
	$$self.$capture_state = () => ({ SettingsSvg: Settings, AwardSvg: Award, RunSvg: Run, svgProps });
	return [svgProps];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$3.name
		});
	}
}

export default Routes;
