import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, F as onMount, K as shouldShowUsernames, E as globals, p as space, q as element, t as text, r as create_component, u as query_selector_all, g as detach_dev, w as claim_space, c as claim_element, f as children, x as claim_text, y as claim_component, j as add_location, h as attr_dev, l as insert_dev, m as append_dev, z as mount_component, M as set_data_dev, B as transition_in, C as transition_out, D as destroy_component } from './client.d845b9be.js';
import { S as SeedNav, a as SvelteTable, s as seeds } from './seeds.96d6e9bd.js';

/* src/routes/scores/[slug].svelte generated by Svelte v3.23.0 */

const { Object: Object_1, console: console_1 } = globals;
const file = "src/routes/scores/[slug].svelte";

function create_fragment(ctx) {
	let t0;
	let div4;
	let div3;
	let h20;
	let t1;
	let t2;
	let t3;
	let t4;
	let div0;
	let h21;
	let t5;
	let t6;
	let div2;
	let t7;
	let div1;
	let t8;
	let current;

	const seednav = new SeedNav({
			props: {
				slug: /*slug*/ ctx[0],
				links: /*links*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			div4 = element("div");
			div3 = element("div");
			h20 = element("h2");
			t1 = text("High Scores: ");
			t2 = text(/*slug*/ ctx[0]);
			t3 = space();
			create_component(seednav.$$.fragment);
			t4 = space();
			div0 = element("div");
			h21 = element("h2");
			t5 = text("Choose an edit count above.");
			t6 = space();
			div2 = element("div");
			t7 = text("Random Scores:\n\t\t\t");
			div1 = element("div");
			t8 = text("TODO");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-k12u4b\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			h20 = claim_element(div3_nodes, "H2", {});
			var h20_nodes = children(h20);
			t1 = claim_text(h20_nodes, "High Scores: ");
			t2 = claim_text(h20_nodes, /*slug*/ ctx[0]);
			h20_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			claim_component(seednav.$$.fragment, div3_nodes);
			t4 = claim_space(div3_nodes);
			div0 = claim_element(div3_nodes, "DIV", {});
			var div0_nodes = children(div0);
			h21 = claim_element(div0_nodes, "H2", {});
			var h21_nodes = children(h21);
			t5 = claim_text(h21_nodes, "Choose an edit count above.");
			h21_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t6 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", {});
			var div2_nodes = children(div2);
			t7 = claim_text(div2_nodes, "Random Scores:\n\t\t\t");
			div1 = claim_element(div2_nodes, "DIV", {});
			var div1_nodes = children(div1);
			t8 = claim_text(div1_nodes, "TODO");
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Scores";
			add_location(h20, file, 82, 2, 1672);
			add_location(h21, file, 85, 3, 1760);
			add_location(div0, file, 84, 2, 1751);
			add_location(div1, file, 89, 3, 1835);
			add_location(div2, file, 87, 2, 1808);
			attr_dev(div3, "class", "");
			add_location(div3, file, 81, 1, 1655);
			attr_dev(div4, "class", "");
			add_location(div4, file, 80, 0, 1639);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div3);
			append_dev(div3, h20);
			append_dev(h20, t1);
			append_dev(h20, t2);
			append_dev(div3, t3);
			mount_component(seednav, div3, null);
			append_dev(div3, t4);
			append_dev(div3, div0);
			append_dev(div0, h21);
			append_dev(h21, t5);
			append_dev(div3, t6);
			append_dev(div3, div2);
			append_dev(div2, t7);
			append_dev(div2, div1);
			append_dev(div1, t8);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*slug*/ 1) set_data_dev(t2, /*slug*/ ctx[0]);
			const seednav_changes = {};
			if (dirty & /*slug*/ 1) seednav_changes.slug = /*slug*/ ctx[0];
			if (dirty & /*links*/ 2) seednav_changes.links = /*links*/ ctx[1];
			seednav.$set(seednav_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(seednav.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(seednav.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div4);
			destroy_component(seednav);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	const result = await this.fetch("http://localhost:3100/prod/get-high-scores");
	let slug = page.params.slug;
	const highScoresBySeed = {};
	const data = await result.json();
	console.log({ data });

	data.scores.map(score => {
		const seedLabel = score.seed_label;
		console.log({ seedLabel });
		const modificationCount = score.modifications.length;

		if (!highScoresBySeed[seedLabel]) {
			highScoresBySeed[seedLabel] = {};
		}

		if (!highScoresBySeed[seedLabel][modificationCount]) {
			highScoresBySeed[seedLabel][modificationCount] = [];
		}

		highScoresBySeed[seedLabel][modificationCount].push(score);

		highScoresBySeed[seedLabel][modificationCount].sort((scoreA, scoreB) => {
			if (scoreA.step_count < scoreB.step_count) {
				return 1;
			} else if (scoreA.step_count > scoreB.step_count) {
				return -1;
			} else {
				return 0;
			}
		});
	});

	console.log({ highScoresBySeed });
	let scores = highScoresBySeed;
	console.log({ slug });
	let links = [];

	if (slug) {
		scores = highScoresBySeed[slug];
		links = Object.keys(scores);
	}

	return { scores, slug, links };
}

function instance($$self, $$props, $$invalidate) {
	let { scores = {} } = $$props;
	let { slug = "" } = $$props;
	let { links = [] } = $$props;
	const writable_props = ["scores", "slug", "links"];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", $$slots, []);

	$$self.$set = $$props => {
		if ("scores" in $$props) $$invalidate(2, scores = $$props.scores);
		if ("slug" in $$props) $$invalidate(0, slug = $$props.slug);
		if ("links" in $$props) $$invalidate(1, links = $$props.links);
	};

	$$self.$capture_state = () => ({
		preload,
		onMount,
		SvelteTable,
		SeedNav,
		shouldShowUsernames,
		seeds,
		scores,
		slug,
		links
	});

	$$self.$inject_state = $$props => {
		if ("scores" in $$props) $$invalidate(2, scores = $$props.scores);
		if ("slug" in $$props) $$invalidate(0, slug = $$props.slug);
		if ("links" in $$props) $$invalidate(1, links = $$props.links);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [slug, links, scores];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { scores: 2, slug: 0, links: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});
	}

	get scores() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scores(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get slug() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set slug(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get links() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set links(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
