import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, Q as create_slot, I as validate_each_argument, R as createEventDispatcher, v as validate_slots, E as globals, q as element, c as claim_element, f as children, g as detach_dev, h as attr_dev, j as add_location, l as insert_dev, N as destroy_each, p as space, w as claim_space, m as append_dev, T as update_slot, B as transition_in, C as transition_out, U as null_to_empty, P as group_outros, O as check_outros, V as select_value, W as add_render_callback, X as select_option, Y as listen_dev, t as text, x as claim_text, M as set_data_dev, Z as prop_dev, _ as Button, K as shouldShowUsernames, $ as setShouldShowUsernames, r as create_component, y as claim_component, z as mount_component, D as destroy_component } from './client.d845b9be.js';

/* node_modules/svelte-table/src/SvelteTable.svelte generated by Svelte v3.23.0 */

const { Object: Object_1 } = globals;
const file = "node_modules/svelte-table/src/SvelteTable.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	return child_ctx;
}

const get_row_slot_changes = dirty => ({ row: dirty[0] & /*c_rows*/ 8192 });
const get_row_slot_context = ctx => ({ row: /*row*/ ctx[31], n: /*n*/ ctx[33] });

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[31] = list[i];
	child_ctx[33] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	return child_ctx;
}

const get_header_slot_changes = dirty => ({
	sortOrder: dirty[0] & /*sortOrder*/ 2,
	sortBy: dirty[0] & /*sortBy*/ 1
});

const get_header_slot_context = ctx => ({
	sortOrder: /*sortOrder*/ ctx[1],
	sortBy: /*sortBy*/ ctx[0]
});

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[41] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	return child_ctx;
}

// (111:4) {#if showFilterHeader}
function create_if_block_1(ctx) {
	let tr;
	let each_value_3 = /*columns*/ ctx[2];
	validate_each_argument(each_value_3);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const block = {
		c: function create() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true });
			var tr_nodes = children(tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tr_nodes);
			}

			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(tr, "class", "svelte-ut8djh");
			add_location(tr, file, 111, 6, 2868);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*asStringArray, classNameSelect, filterSettings, columns, filterValues*/ 39172) {
				each_value_3 = /*columns*/ ctx[2];
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(111:4) {#if showFilterHeader}",
		ctx
	});

	return block;
}

// (115:12) {#if filterValues[col.key] !== undefined}
function create_if_block_2(ctx) {
	let select;
	let option;
	let select_class_value;
	let mounted;
	let dispose;
	let each_value_4 = /*filterValues*/ ctx[11][/*col*/ ctx[34].key];
	validate_each_argument(each_value_4);
	let each_blocks = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	function select_change_handler() {
		/*select_change_handler*/ ctx[27].call(select, /*col*/ ctx[34]);
	}

	const block = {
		c: function create() {
			select = element("select");
			option = element("option");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			select = claim_element(nodes, "SELECT", { class: true });
			var select_nodes = children(select);
			option = claim_element(select_nodes, "OPTION", { value: true });
			children(option).forEach(detach_dev);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(select_nodes);
			}

			select_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option.__value = undefined;
			option.value = option.__value;
			add_location(option, file, 116, 16, 3088);
			attr_dev(select, "class", select_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15](/*classNameSelect*/ ctx[8])) + " svelte-ut8djh"));
			if (/*filterSettings*/ ctx[12][/*col*/ ctx[34].key] === void 0) add_render_callback(select_change_handler);
			add_location(select, file, 115, 14, 2987);
		},
		m: function mount(target, anchor) {
			insert_dev(target, select, anchor);
			append_dev(select, option);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*filterSettings*/ ctx[12][/*col*/ ctx[34].key]);

			if (!mounted) {
				dispose = listen_dev(select, "change", select_change_handler);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*filterValues, columns*/ 2052) {
				each_value_4 = /*filterValues*/ ctx[11][/*col*/ ctx[34].key];
				validate_each_argument(each_value_4);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_4(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_4.length;
			}

			if (dirty[0] & /*classNameSelect*/ 256 && select_class_value !== (select_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15](/*classNameSelect*/ ctx[8])) + " svelte-ut8djh"))) {
				attr_dev(select, "class", select_class_value);
			}

			if (dirty[0] & /*filterSettings, columns, filterValues*/ 6148) {
				select_option(select, /*filterSettings*/ ctx[12][/*col*/ ctx[34].key]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(select);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(115:12) {#if filterValues[col.key] !== undefined}",
		ctx
	});

	return block;
}

// (118:16) {#each filterValues[col.key] as option}
function create_each_block_4(ctx) {
	let option;
	let t_value = /*option*/ ctx[41].name + "";
	let t;
	let option_value_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			option = claim_element(nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t = claim_text(option_nodes, t_value);
			option_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option.__value = option_value_value = /*option*/ ctx[41].value;
			option.value = option.__value;
			add_location(option, file, 118, 18, 3198);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*filterValues, columns*/ 2052 && t_value !== (t_value = /*option*/ ctx[41].name + "")) set_data_dev(t, t_value);

			if (dirty[0] & /*filterValues, columns*/ 2052 && option_value_value !== (option_value_value = /*option*/ ctx[41].value)) {
				prop_dev(option, "__value", option_value_value);
			}

			option.value = option.__value;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(118:16) {#each filterValues[col.key] as option}",
		ctx
	});

	return block;
}

// (113:8) {#each columns as col}
function create_each_block_3(ctx) {
	let th;
	let t;
	let if_block = /*filterValues*/ ctx[11][/*col*/ ctx[34].key] !== undefined && create_if_block_2(ctx);

	const block = {
		c: function create() {
			th = element("th");
			if (if_block) if_block.c();
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			th = claim_element(nodes, "TH", {});
			var th_nodes = children(th);
			if (if_block) if_block.l(th_nodes);
			t = claim_space(th_nodes);
			th_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(th, file, 113, 10, 2914);
		},
		m: function mount(target, anchor) {
			insert_dev(target, th, anchor);
			if (if_block) if_block.m(th, null);
			append_dev(th, t);
		},
		p: function update(ctx, dirty) {
			if (/*filterValues*/ ctx[11][/*col*/ ctx[34].key] !== undefined) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(th, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(th);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(113:8) {#each columns as col}",
		ctx
	});

	return block;
}

// (135:14) {#if sortBy === col.key}
function create_if_block(ctx) {
	let t_value = (/*sortOrder*/ ctx[1] === 1
	? /*iconAsc*/ ctx[3]
	: /*iconDesc*/ ctx[4]) + "";

	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*sortOrder, iconAsc, iconDesc*/ 26 && t_value !== (t_value = (/*sortOrder*/ ctx[1] === 1
			? /*iconAsc*/ ctx[3]
			: /*iconDesc*/ ctx[4]) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(135:14) {#if sortBy === col.key}",
		ctx
	});

	return block;
}

// (129:10) {#each columns as col}
function create_each_block_2(ctx) {
	let th;
	let t0_value = /*col*/ ctx[34].title + "";
	let t0;
	let t1;
	let t2;
	let th_class_value;
	let mounted;
	let dispose;
	let if_block = /*sortBy*/ ctx[0] === /*col*/ ctx[34].key && create_if_block(ctx);

	function click_handler(...args) {
		return /*click_handler*/ ctx[28](/*col*/ ctx[34], ...args);
	}

	const block = {
		c: function create() {
			th = element("th");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			th = claim_element(nodes, "TH", { class: true });
			var th_nodes = children(th);
			t0 = claim_text(th_nodes, t0_value);
			t1 = claim_space(th_nodes);
			if (if_block) if_block.l(th_nodes);
			t2 = claim_space(th_nodes);
			th_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(th, "class", th_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15]([
				/*col*/ ctx[34].sortable ? "isSortable" : null,
				/*col*/ ctx[34].headerClass
			])) + " svelte-ut8djh"));

			add_location(th, file, 129, 12, 3493);
		},
		m: function mount(target, anchor) {
			insert_dev(target, th, anchor);
			append_dev(th, t0);
			append_dev(th, t1);
			if (if_block) if_block.m(th, null);
			append_dev(th, t2);

			if (!mounted) {
				dispose = listen_dev(th, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*columns*/ 4 && t0_value !== (t0_value = /*col*/ ctx[34].title + "")) set_data_dev(t0, t0_value);

			if (/*sortBy*/ ctx[0] === /*col*/ ctx[34].key) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(th, t2);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty[0] & /*columns*/ 4 && th_class_value !== (th_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15]([
				/*col*/ ctx[34].sortable ? "isSortable" : null,
				/*col*/ ctx[34].headerClass
			])) + " svelte-ut8djh"))) {
				attr_dev(th, "class", th_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(th);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(129:10) {#each columns as col}",
		ctx
	});

	return block;
}

// (127:64)          
function fallback_block_1(ctx) {
	let tr;
	let each_value_2 = /*columns*/ ctx[2];
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tr_nodes);
			}

			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(tr, file, 127, 8, 3443);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*asStringArray, columns, handleClickCol, sortOrder, iconAsc, iconDesc, sortBy*/ 98335) {
				each_value_2 = /*columns*/ ctx[2];
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block_1.name,
		type: "fallback",
		source: "(127:64)          ",
		ctx
	});

	return block;
}

// (147:10) {#each columns as col}
function create_each_block_1(ctx) {
	let td;

	let raw_value = (/*col*/ ctx[34].renderValue
	? /*col*/ ctx[34].renderValue(/*row*/ ctx[31])
	: /*col*/ ctx[34].value(/*row*/ ctx[31])) + "";

	let td_class_value;
	let mounted;
	let dispose;

	function click_handler_1(...args) {
		return /*click_handler_1*/ ctx[29](/*row*/ ctx[31], /*col*/ ctx[34], ...args);
	}

	const block = {
		c: function create() {
			td = element("td");
			this.h();
		},
		l: function claim(nodes) {
			td = claim_element(nodes, "TD", { class: true });
			var td_nodes = children(td);
			td_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td, "class", td_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15]([/*col*/ ctx[34].class, /*classNameCell*/ ctx[10]])) + " svelte-ut8djh"));
			add_location(td, file, 147, 12, 4126);
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			td.innerHTML = raw_value;

			if (!mounted) {
				dispose = listen_dev(td, "click", click_handler_1, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*columns, c_rows*/ 8196 && raw_value !== (raw_value = (/*col*/ ctx[34].renderValue
			? /*col*/ ctx[34].renderValue(/*row*/ ctx[31])
			: /*col*/ ctx[34].value(/*row*/ ctx[31])) + "")) td.innerHTML = raw_value;
			if (dirty[0] & /*columns, classNameCell*/ 1028 && td_class_value !== (td_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15]([/*col*/ ctx[34].class, /*classNameCell*/ ctx[10]])) + " svelte-ut8djh"))) {
				attr_dev(td, "class", td_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(147:10) {#each columns as col}",
		ctx
	});

	return block;
}

// (145:40)          
function fallback_block(ctx) {
	let tr;
	let tr_class_value;
	let t;
	let mounted;
	let dispose;
	let each_value_1 = /*columns*/ ctx[2];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	function click_handler_2(...args) {
		return /*click_handler_2*/ ctx[30](/*row*/ ctx[31], ...args);
	}

	const block = {
		c: function create() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true });
			var tr_nodes = children(tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tr_nodes);
			}

			tr_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(tr, "class", tr_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15](/*classNameRow*/ ctx[9])) + " svelte-ut8djh"));
			add_location(tr, file, 145, 8, 3999);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			insert_dev(target, t, anchor);

			if (!mounted) {
				dispose = listen_dev(tr, "click", click_handler_2, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*asStringArray, columns, classNameCell, handleClickCell, c_rows*/ 304132) {
				each_value_1 = /*columns*/ ctx[2];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty[0] & /*classNameRow*/ 512 && tr_class_value !== (tr_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15](/*classNameRow*/ ctx[9])) + " svelte-ut8djh"))) {
				attr_dev(tr, "class", tr_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(145:40)          ",
		ctx
	});

	return block;
}

// (144:4) {#each c_rows as row, n}
function create_each_block(ctx) {
	let current;
	const row_slot_template = /*$$slots*/ ctx[26].row;
	const row_slot = create_slot(row_slot_template, ctx, /*$$scope*/ ctx[25], get_row_slot_context);
	const row_slot_or_fallback = row_slot || fallback_block(ctx);

	const block = {
		c: function create() {
			if (row_slot_or_fallback) row_slot_or_fallback.c();
		},
		l: function claim(nodes) {
			if (row_slot_or_fallback) row_slot_or_fallback.l(nodes);
		},
		m: function mount(target, anchor) {
			if (row_slot_or_fallback) {
				row_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (row_slot) {
				if (row_slot.p && dirty[0] & /*$$scope, c_rows*/ 33562624) {
					update_slot(row_slot, row_slot_template, ctx, /*$$scope*/ ctx[25], dirty, get_row_slot_changes, get_row_slot_context);
				}
			} else {
				if (row_slot_or_fallback && row_slot_or_fallback.p && dirty[0] & /*classNameRow, c_rows, columns, classNameCell*/ 9732) {
					row_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (row_slot_or_fallback) row_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(144:4) {#each c_rows as row, n}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let table;
	let thead;
	let t0;
	let thead_class_value;
	let t1;
	let tbody;
	let tbody_class_value;
	let table_class_value;
	let current;
	let if_block = /*showFilterHeader*/ ctx[14] && create_if_block_1(ctx);
	const header_slot_template = /*$$slots*/ ctx[26].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[25], get_header_slot_context);
	const header_slot_or_fallback = header_slot || fallback_block_1(ctx);
	let each_value = /*c_rows*/ ctx[13];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			table = element("table");
			thead = element("thead");
			if (if_block) if_block.c();
			t0 = space();
			if (header_slot_or_fallback) header_slot_or_fallback.c();
			t1 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			table = claim_element(nodes, "TABLE", { class: true });
			var table_nodes = children(table);
			thead = claim_element(table_nodes, "THEAD", { class: true });
			var thead_nodes = children(thead);
			if (if_block) if_block.l(thead_nodes);
			t0 = claim_space(thead_nodes);
			if (header_slot_or_fallback) header_slot_or_fallback.l(thead_nodes);
			thead_nodes.forEach(detach_dev);
			t1 = claim_space(table_nodes);
			tbody = claim_element(table_nodes, "TBODY", { class: true });
			var tbody_nodes = children(tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody_nodes);
			}

			tbody_nodes.forEach(detach_dev);
			table_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(thead, "class", thead_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15](/*classNameThead*/ ctx[6])) + " svelte-ut8djh"));
			add_location(thead, file, 109, 2, 2789);
			attr_dev(tbody, "class", tbody_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15](/*classNameTbody*/ ctx[7])) + " svelte-ut8djh"));
			add_location(tbody, file, 142, 2, 3875);
			attr_dev(table, "class", table_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15](/*classNameTable*/ ctx[5])) + " svelte-ut8djh"));
			add_location(table, file, 108, 0, 2741);
		},
		m: function mount(target, anchor) {
			insert_dev(target, table, anchor);
			append_dev(table, thead);
			if (if_block) if_block.m(thead, null);
			append_dev(thead, t0);

			if (header_slot_or_fallback) {
				header_slot_or_fallback.m(thead, null);
			}

			append_dev(table, t1);
			append_dev(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*showFilterHeader*/ ctx[14]) if_block.p(ctx, dirty);

			if (header_slot) {
				if (header_slot.p && dirty[0] & /*$$scope, sortOrder, sortBy*/ 33554435) {
					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[25], dirty, get_header_slot_changes, get_header_slot_context);
				}
			} else {
				if (header_slot_or_fallback && header_slot_or_fallback.p && dirty[0] & /*columns, sortOrder, iconAsc, iconDesc, sortBy*/ 31) {
					header_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*classNameThead*/ 64 && thead_class_value !== (thead_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15](/*classNameThead*/ ctx[6])) + " svelte-ut8djh"))) {
				attr_dev(thead, "class", thead_class_value);
			}

			if (dirty[0] & /*asStringArray, classNameRow, handleClickRow, c_rows, columns, classNameCell, handleClickCell, $$scope*/ 33990148) {
				each_value = /*c_rows*/ ctx[13];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(tbody, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty[0] & /*classNameTbody*/ 128 && tbody_class_value !== (tbody_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15](/*classNameTbody*/ ctx[7])) + " svelte-ut8djh"))) {
				attr_dev(tbody, "class", tbody_class_value);
			}

			if (!current || dirty[0] & /*classNameTable*/ 32 && table_class_value !== (table_class_value = "" + (null_to_empty(/*asStringArray*/ ctx[15](/*classNameTable*/ ctx[5])) + " svelte-ut8djh"))) {
				attr_dev(table, "class", table_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header_slot_or_fallback, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(header_slot_or_fallback, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(table);
			if (if_block) if_block.d();
			if (header_slot_or_fallback) header_slot_or_fallback.d(detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { columns } = $$props;
	let { rows } = $$props;
	let { sortBy = "" } = $$props;
	let { sortOrder = 1 } = $$props;
	let { iconAsc = "▲" } = $$props;
	let { iconDesc = "▼" } = $$props;
	let { classNameTable = "" } = $$props;
	let { classNameThead = "" } = $$props;
	let { classNameTbody = "" } = $$props;
	let { classNameSelect = "" } = $$props;
	let { classNameRow = "" } = $$props;
	let { classNameCell = "" } = $$props;
	let sortFunction = () => "";
	let showFilterHeader = columns.some(c => c.filterOptions !== undefined);
	let filterValues = {};
	let filterSettings = {};
	let columnByKey = {};

	columns.forEach(col => {
		$$invalidate(21, columnByKey[col.key] = col, columnByKey);
	});

	const asStringArray = v => [].concat(v).filter(v => typeof v === "string" && v !== "").join(" ");

	const calculateFilterValues = () => {
		$$invalidate(11, filterValues = {});

		columns.forEach(c => {
			if (typeof c.filterOptions === "function") {
				$$invalidate(11, filterValues[c.key] = c.filterOptions(rows), filterValues);
			} else if (Array.isArray(c.filterOptions)) {
				// if array of strings is provided, use it for name and value
				$$invalidate(11, filterValues[c.key] = c.filterOptions.map(val => ({ name: val, value: val })), filterValues);
			}
		});
	};

	

	const updateSortOrder = colKey => {
		if (colKey === sortBy) {
			$$invalidate(1, sortOrder = sortOrder === 1 ? -1 : 1);
		} else {
			$$invalidate(1, sortOrder = 1);
		}
	};

	const handleClickCol = (event, col) => {
		updateSortOrder(col.key);
		$$invalidate(0, sortBy = col.key);
		dispatch("clickCol", { event, col, key: col.key });
	};

	const handleClickRow = (event, row) => {
		dispatch("clickRow", { event, row });
	};

	const handleClickCell = (event, row, key) => {
		dispatch("clickCell", { event, row, key });
	};

	if (showFilterHeader) {
		calculateFilterValues();
	}

	const writable_props = [
		"columns",
		"rows",
		"sortBy",
		"sortOrder",
		"iconAsc",
		"iconDesc",
		"classNameTable",
		"classNameThead",
		"classNameTbody",
		"classNameSelect",
		"classNameRow",
		"classNameCell"
	];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SvelteTable> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("SvelteTable", $$slots, ['header','row']);

	function select_change_handler(col) {
		filterSettings[col.key] = select_value(this);
		$$invalidate(12, filterSettings);
		$$invalidate(2, columns);
		$$invalidate(11, filterValues);
	}

	const click_handler = (col, e) => handleClickCol(e, col);

	const click_handler_1 = (row, col, e) => {
		handleClickCell(e, row, col.key);
	};

	const click_handler_2 = (row, e) => {
		handleClickRow(e, row);
	};

	$$self.$set = $$props => {
		if ("columns" in $$props) $$invalidate(2, columns = $$props.columns);
		if ("rows" in $$props) $$invalidate(19, rows = $$props.rows);
		if ("sortBy" in $$props) $$invalidate(0, sortBy = $$props.sortBy);
		if ("sortOrder" in $$props) $$invalidate(1, sortOrder = $$props.sortOrder);
		if ("iconAsc" in $$props) $$invalidate(3, iconAsc = $$props.iconAsc);
		if ("iconDesc" in $$props) $$invalidate(4, iconDesc = $$props.iconDesc);
		if ("classNameTable" in $$props) $$invalidate(5, classNameTable = $$props.classNameTable);
		if ("classNameThead" in $$props) $$invalidate(6, classNameThead = $$props.classNameThead);
		if ("classNameTbody" in $$props) $$invalidate(7, classNameTbody = $$props.classNameTbody);
		if ("classNameSelect" in $$props) $$invalidate(8, classNameSelect = $$props.classNameSelect);
		if ("classNameRow" in $$props) $$invalidate(9, classNameRow = $$props.classNameRow);
		if ("classNameCell" in $$props) $$invalidate(10, classNameCell = $$props.classNameCell);
		if ("$$scope" in $$props) $$invalidate(25, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		dispatch,
		columns,
		rows,
		sortBy,
		sortOrder,
		iconAsc,
		iconDesc,
		classNameTable,
		classNameThead,
		classNameTbody,
		classNameSelect,
		classNameRow,
		classNameCell,
		sortFunction,
		showFilterHeader,
		filterValues,
		filterSettings,
		columnByKey,
		asStringArray,
		calculateFilterValues,
		updateSortOrder,
		handleClickCol,
		handleClickRow,
		handleClickCell,
		c_rows
	});

	$$self.$inject_state = $$props => {
		if ("columns" in $$props) $$invalidate(2, columns = $$props.columns);
		if ("rows" in $$props) $$invalidate(19, rows = $$props.rows);
		if ("sortBy" in $$props) $$invalidate(0, sortBy = $$props.sortBy);
		if ("sortOrder" in $$props) $$invalidate(1, sortOrder = $$props.sortOrder);
		if ("iconAsc" in $$props) $$invalidate(3, iconAsc = $$props.iconAsc);
		if ("iconDesc" in $$props) $$invalidate(4, iconDesc = $$props.iconDesc);
		if ("classNameTable" in $$props) $$invalidate(5, classNameTable = $$props.classNameTable);
		if ("classNameThead" in $$props) $$invalidate(6, classNameThead = $$props.classNameThead);
		if ("classNameTbody" in $$props) $$invalidate(7, classNameTbody = $$props.classNameTbody);
		if ("classNameSelect" in $$props) $$invalidate(8, classNameSelect = $$props.classNameSelect);
		if ("classNameRow" in $$props) $$invalidate(9, classNameRow = $$props.classNameRow);
		if ("classNameCell" in $$props) $$invalidate(10, classNameCell = $$props.classNameCell);
		if ("sortFunction" in $$props) $$invalidate(20, sortFunction = $$props.sortFunction);
		if ("showFilterHeader" in $$props) $$invalidate(14, showFilterHeader = $$props.showFilterHeader);
		if ("filterValues" in $$props) $$invalidate(11, filterValues = $$props.filterValues);
		if ("filterSettings" in $$props) $$invalidate(12, filterSettings = $$props.filterSettings);
		if ("columnByKey" in $$props) $$invalidate(21, columnByKey = $$props.columnByKey);
		if ("c_rows" in $$props) $$invalidate(13, c_rows = $$props.c_rows);
	};

	let c_rows;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*columnByKey, sortBy*/ 2097153) {
			 {
				let col = columnByKey[sortBy];

				if (col !== undefined && col.sortable === true && typeof col.value === "function") {
					$$invalidate(20, sortFunction = r => col.value(r));
				}
			}
		}

		if ($$self.$$.dirty[0] & /*rows, filterSettings, columnByKey, sortFunction, sortOrder*/ 3674114) {
			 $$invalidate(13, c_rows = rows.filter(r => Object.keys(filterSettings).every(f => {
				let ret = filterSettings[f] === undefined || // default to value() if filterValue() not provided in col
				filterSettings[f] === (typeof columnByKey[f].filterValue === "function"
				? columnByKey[f].filterValue(r)
				: columnByKey[f].value(r));

				return ret;
			})).map(r => Object.assign({}, r, { $sortOn: sortFunction(r) })).sort((a, b) => {
				if (a.$sortOn > b.$sortOn) return sortOrder; else if (a.$sortOn < b.$sortOn) return -sortOrder;
				return 0;
			}));
		}
	};

	return [
		sortBy,
		sortOrder,
		columns,
		iconAsc,
		iconDesc,
		classNameTable,
		classNameThead,
		classNameTbody,
		classNameSelect,
		classNameRow,
		classNameCell,
		filterValues,
		filterSettings,
		c_rows,
		showFilterHeader,
		asStringArray,
		handleClickCol,
		handleClickRow,
		handleClickCell,
		rows,
		sortFunction,
		columnByKey,
		dispatch,
		calculateFilterValues,
		updateSortOrder,
		$$scope,
		$$slots,
		select_change_handler,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class SvelteTable extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				columns: 2,
				rows: 19,
				sortBy: 0,
				sortOrder: 1,
				iconAsc: 3,
				iconDesc: 4,
				classNameTable: 5,
				classNameThead: 6,
				classNameTbody: 7,
				classNameSelect: 8,
				classNameRow: 9,
				classNameCell: 10
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SvelteTable",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*columns*/ ctx[2] === undefined && !("columns" in props)) {
			console.warn("<SvelteTable> was created without expected prop 'columns'");
		}

		if (/*rows*/ ctx[19] === undefined && !("rows" in props)) {
			console.warn("<SvelteTable> was created without expected prop 'rows'");
		}
	}

	get columns() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set columns(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rows() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rows(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sortBy() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sortBy(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sortOrder() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sortOrder(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconAsc() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconAsc(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconDesc() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconDesc(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classNameTable() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classNameTable(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classNameThead() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classNameThead(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classNameTbody() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classNameTbody(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classNameSelect() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classNameSelect(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classNameRow() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classNameRow(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classNameCell() {
		throw new Error("<SvelteTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classNameCell(value) {
		throw new Error("<SvelteTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/SeedNav.svelte generated by Svelte v3.23.0 */
const file$1 = "src/components/SeedNav.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (50:8) {:else}
function create_else_block(ctx) {
	let current;

	const button = new Button({
			props: {
				tag: "a",
				href: "/scores/" + /*slug*/ ctx[1] + "/" + /*link*/ ctx[5],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*slug, links*/ 3) button_changes.href = "/scores/" + /*slug*/ ctx[1] + "/" + /*link*/ ctx[5];

			if (dirty & /*$$scope, links*/ 257) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(50:8) {:else}",
		ctx
	});

	return block;
}

// (48:8) {#if link === currentEditCount}
function create_if_block$1(ctx) {
	let current;

	const button = new Button({
			props: {
				type: "is-primary",
				tag: "a",
				href: "/scores/" + /*slug*/ ctx[1] + "/" + /*link*/ ctx[5],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*slug, links*/ 3) button_changes.href = "/scores/" + /*slug*/ ctx[1] + "/" + /*link*/ ctx[5];

			if (dirty & /*$$scope, links*/ 257) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(48:8) {#if link === currentEditCount}",
		ctx
	});

	return block;
}

// (51:10) <Button tag="a" href="/scores/{slug}/{link}">
function create_default_slot_1(ctx) {
	let t_value = /*link*/ ctx[5] + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*links*/ 1 && t_value !== (t_value = /*link*/ ctx[5] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(51:10) <Button tag=\\\"a\\\" href=\\\"/scores/{slug}/{link}\\\">",
		ctx
	});

	return block;
}

// (49:10) <Button type="is-primary" tag="a" href="/scores/{slug}/{link}">
function create_default_slot(ctx) {
	let t_value = /*link*/ ctx[5] + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*links*/ 1 && t_value !== (t_value = /*link*/ ctx[5] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(49:10) <Button type=\\\"is-primary\\\" tag=\\\"a\\\" href=\\\"/scores/{slug}/{link}\\\">",
		ctx
	});

	return block;
}

// (46:4) { #each links as link}
function create_each_block$1(ctx) {
	let li;
	let current_block_type_index;
	let if_block;
	let t;
	let current;
	const if_block_creators = [create_if_block$1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*link*/ ctx[5] === /*currentEditCount*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			li = element("li");
			if_block.c();
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			if_block.l(li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-kvt9n");
			add_location(li, file$1, 46, 4, 705);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			if_blocks[current_block_type_index].m(li, null);
			append_dev(li, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(li, t);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(46:4) { #each links as link}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let nav;
	let ol;
	let current;
	let each_value = /*links*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			nav = element("nav");
			ol = element("ol");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			ol = claim_element(nav_nodes, "OL", { class: true });
			var ol_nodes = children(ol);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ol_nodes);
			}

			ol_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ol, "class", "svelte-kvt9n");
			add_location(ol, file$1, 43, 1, 668);
			attr_dev(nav, "class", "svelte-kvt9n");
			add_location(nav, file$1, 42, 0, 661);
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);
			append_dev(nav, ol);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ol, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*slug, links, currentEditCount*/ 7) {
				each_value = /*links*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ol, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function isSegmentActive(_segment, thisSegment) {
	if (!_segment && !thisSegment || _segment === thisSegment) {
		return "page";
	}
}

function instance$1($$self, $$props, $$invalidate) {
	let { segment } = $$props;
	let { links = [] } = $$props;
	let { slug = "" } = $$props;
	let { currentEditCount = "" } = $$props;
	const writable_props = ["segment", "links", "slug", "currentEditCount"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SeedNav> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("SeedNav", $$slots, []);

	$$self.$set = $$props => {
		if ("segment" in $$props) $$invalidate(4, segment = $$props.segment);
		if ("links" in $$props) $$invalidate(0, links = $$props.links);
		if ("slug" in $$props) $$invalidate(1, slug = $$props.slug);
		if ("currentEditCount" in $$props) $$invalidate(2, currentEditCount = $$props.currentEditCount);
	};

	$$self.$capture_state = () => ({
		Button,
		shouldShowUsernames,
		setShouldShowUsernames,
		isSegmentActive,
		segment,
		links,
		slug,
		currentEditCount
	});

	$$self.$inject_state = $$props => {
		if ("segment" in $$props) $$invalidate(4, segment = $$props.segment);
		if ("links" in $$props) $$invalidate(0, links = $$props.links);
		if ("slug" in $$props) $$invalidate(1, slug = $$props.slug);
		if ("currentEditCount" in $$props) $$invalidate(2, currentEditCount = $$props.currentEditCount);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [links, slug, currentEditCount, isSegmentActive, segment];
}

class SeedNav extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			isSegmentActive: 3,
			segment: 4,
			links: 0,
			slug: 1,
			currentEditCount: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SeedNav",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*segment*/ ctx[4] === undefined && !("segment" in props)) {
			console.warn("<SeedNav> was created without expected prop 'segment'");
		}
	}

	get isSegmentActive() {
		return isSegmentActive;
	}

	set isSegmentActive(value) {
		throw new Error("<SeedNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get segment() {
		throw new Error("<SeedNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set segment(value) {
		throw new Error("<SeedNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get links() {
		throw new Error("<SeedNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set links(value) {
		throw new Error("<SeedNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get slug() {
		throw new Error("<SeedNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set slug(value) {
		throw new Error("<SeedNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get currentEditCount() {
		throw new Error("<SeedNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set currentEditCount(value) {
		throw new Error("<SeedNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var seeds = [
	{
		cellules_string
		name: "C",
		slug: "c"
	},
	{
		cellules_string
		name: "Cube",
		slug: "cube"
	},
	{
		cellules_string
		name: "Diamond",
		slug: "diamond"
	},
	{
		cellules_string
		name: "Glider",
		slug: "glider"
	},
	{
		cellules_string
		name: "Forty Two",
		slug: "forty-two"
	},
	{
		cellules_string
		name: "Line",
		slug: "line"
	},
	{
		cellules_string
		name: "Mr Sir",
		slug: "mr-sir"
	},
	{
		cellules_string
		name: "Pentadecathlon",
		slug: "pentadecathlon"
	},
	{
		cellules_string
		name: "Windmills",
		slug: "windmills"
	}
];

export { SeedNav as S, SvelteTable as a, seeds as s };
